#Import Libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
%matplotlib inline

#Load the dataset and extract independant and dependant variables
companies = pd.read_csv('C:/Users/hamandawanat/Desktop/Regression Model Project in python/1000_companies.csv')

X = companies.iloc[:, :-1].values
Y = companies.iloc[:, 4].values

#List the first 5 rows of data. NB when programming the rows always start with 0. 
companies.head()

	R&D Spend	Administration	Marketing Spend	State	Profit
0	165349.20	136897.80	471784.10	New York	192261.83
1	162597.70	151377.59	443898.53	California	191792.06
2	153441.51	101145.55	407934.54	Florida	191050.39
3	144372.41	118671.85	383199.62	New York	182901.99
4	142107.34	91391.77	366168.42	Florida	166187.94

#Data visualisation
#Building the correlation matrix
sns.heatmap(companies.corr())

# Now we need to fit our linear regression model so that our data fits perfectly
# Encoding categorical data - we want to transform the column with states because python doesnt read words and change it to numbers.

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

# Create a ColumnTransformer to apply OneHotEncoder to column 3
ct = ColumnTransformer(
    [("one_hot_encoder", OneHotEncoder(), [3])], 
    remainder="passthrough"
)

# Apply the ColumnTransformer to your input data
X = ct.fit_transform(X)

#Avoiding dummy varable trap - we transformed our header into the setup so when we did the encoder, it created 2 columns but we need 1 with both the variable and the name.
X = X[:, 1:]  #This is removing that 1 extra column

#Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)

#Fitting the multiple linear regression model to the Training Set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

#Now lets use the model that we have created
#Predicting the Test set results
y_pred = regressor.predict(X_test)
print(y_pred)

#Calculating the coeficients
print(regressor.coef_)

#Calculating the intercept
print(regressor.intercept_)

#Calculating the r squared value - How valid is our model
from sklearn.metrics import r2_score
r2_score(y_test, y_pred)

# The end - We successfully trained our model with certain predictors and estimated the profit of companies using linear regression.
